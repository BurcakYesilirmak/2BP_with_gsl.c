    /* JPL/HORIZONS 2 Pallas (A802 FA)     
     Coordinate Origin :	Sun (body center) [500@10]
     Time Span [change] : 	Start=2018-06-05, Stop=2019-06-05, Step=1 d */
     
#include <stdio.h>
#include <stdio.h>
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv2.h>
#include <math.h>

int
func (double t,const double y[], double f[],
      void *params)
{
  (void)(t); 
  double mu = *(double *)params;
  double k,p;
  k = y[0]*y[0]+y[1]*y[1]+y[2]*y[2];
  p= k*sqrt(k);
       //y[0]=x , y[1]=y , y[2]=z  
  f[0] = y[3];  //Vx
  f[1] = y[4];  //Vy
  f[2] = y[5];  //Vz
  
    /*     printf("%.16le\n", -mu*y[0]/p);
                  printf("%.16le\n", -mu*y[1]/p);
                           printf("%.16le\n", -mu*y[2]/p);
    exit(1);  */

  f[3] = -mu*y[0]/p;   // -mu*x/(x^2+y^2+z^2)^3/2
  f[4] = -mu*y[1]/p;   // -mu*y/(x^2+y^2+z^2)^3/2
  f[5] = -mu*y[2]/p;   // -mu*z/(x^2+y^2+z^2)^3/2

  return GSL_SUCCESS;
}

int
jac (double t,const double y[], double *dfdy,
     double dfdt[], void *params)
{
  (void)(t); 
  double mu = *(double *)params;
  double p;
  int i,k ;
  double k2 = y[0]*y[0]+y[1]*y[1]+y[2]*y[2];
  double r=k2*sqrt(k2);
  double constant;
  constant = mu/(r*k2);
  gsl_matrix_view dfdy_mat
    = gsl_matrix_view_array (dfdy, 6, 6);

  // fill the Jacobian matrix 
  gsl_matrix * m = &dfdy_mat.matrix;

       // Part 1 for zeros
    for (i=0 ; i<=2; i++) {
      for(k=0; k<=2; k++){
         p=0.0; 
        gsl_matrix_set (m, i, k, p);
      } }

    // Part 1 for one and zeros
          p=0;  
    for (i=0 ; i<=2; i++) {
      for(k=3; k<=5; k++){
        if ( k-i == 3)
          p= 1.0; 
           else if ( k-i != 6)
           p=0.0;
            gsl_matrix_set (m, i, k, p);
    } }

      //Part 2 for zeros
         p=0.0;
    for (i=3 ; i<=5; i++) {
      for( k=3; k<=5; k++){
            gsl_matrix_set (m, i, k, p);
      } }

  gsl_matrix_set (m, 3, 0, (3*y[0]*y[0]-k2)*constant);
  gsl_matrix_set (m, 3, 1, 3*y[0]*y[1]*constant);
  gsl_matrix_set (m, 3, 2, 3*y[0]*y[2]*constant);

  gsl_matrix_set (m, 4, 0, 3*constant*y[1]*y[0]);
  gsl_matrix_set (m, 4, 1, (3*y[1]*y[1]-k2)*constant);
  gsl_matrix_set (m, 4, 2, 3*constant*y[1]*y[2]);

  gsl_matrix_set (m, 5, 0, 3*constant*y[0]*y[2]);
  gsl_matrix_set (m, 5, 1, 3*constant*y[1]*y[2]);
  gsl_matrix_set (m, 5, 2, (3*y[2]*y[2]-k2)*constant);


// set explicit t dependence of f[i] 
  dfdt[0] = 0.0;
  dfdt[1] = 0.0;
  dfdt[2] = 0.0;
  dfdt[3] = 0.0;
  dfdt[4] = 0.0;
  dfdt[5] = 0.0;  
  return GSL_SUCCESS;
}
    /* JPL/HORIZONS 2 Pallas (A802 FA)     
     Coordinate Origin :	Sun (body center) [500@10]
     Time Span [change] : 	Start=2018-06-05, Stop=2019-06-05, Step=1 d */

/* void integrator_adams(double abserr, double relerr) {

  double k3=0.01720209895, mu ;
    mu= k3*k3; 
        char name[25];
    FILE *out;
    sprintf(name, "ORD_%.1f_%.1f.txt", -log10(relerr)*10, -log10(abserr)*10);
    out=fopen(name,"w");
    gsl_odeiv2_system sys = {func, jac, 6, &mu}; 
    
    // time step parameters 
  double t = 0.0, t_step=1, T=2000;
    
    // Select explicit method
  const gsl_odeiv2_step_type * st = gsl_odeiv2_step_msadams;

  //set errors and create the driver object
    gsl_odeiv2_driver* driver= 
      gsl_odeiv2_driver_alloc_y_new(&sys, st, t_step, abserr, relerr);
double y[6] ={-6.685074817026049E-01, 1.706558853671706E+00, -1.123043465687632E+00, -1.207950275095047E-02, -3.384553498022686E-03, 3.350958555890135E-03};

        while (t <= T) {
            gsl_odeiv2_driver_apply (driver, &t, t+t_step, y); 
            fprintf(out,"%.16le %.16le %.16le %.16le \n", t, y[0], y[1], y[2]); 
           // printf ("%.16le %.16le %.16le %.16le \n", t, y[0], y[1], y[2]);            
           // printf ("%.16le %.16le %.16le %.16le \n", t, y[3], y[4], y[5]);
            }
  gsl_odeiv2_driver_free (driver);
}

    int main (void) 
    {
      int i, k;
      double abserr, relerr;
      //RELATIVE AND ABSOLUTE ERROR VALUES
      double abs[10] = {1e-13, 5e-13, 1e-14, 5e-14, 1e-15, 5e-15, 1e-16, 5e-16, 1e-17, 5e-17};
      double rel[10] = {1e-13, 5e-13, 1e-14, 5e-14, 1e-15, 5e-15, 1e-16, 5e-16, 1e-17, 5e-17};

      //COMBINE ERRORS  
      for( i=0; i<10 ; i++) {
        for( k=0; k<10 ; k++) {
          abserr= abs[i];
          relerr= rel[k];
          integrator_adams(abs[i], rel[k]); 
      //    printf("%.1f %.1f\n", -log10(abs[i])*10, -log10(rel[k])*10);
      } } 
      //integrator_adams(&abserr, &relerr); 
      return 0; 
    } */

    // JUST FOR ONE RELATIVE AND ABSOLUTE VALUE :
 int main (void)
{
  double k3=0.01720209895, mu ;
  mu= k3*k3; 
  gsl_odeiv2_system sys = {func, jac, 6, &mu};
  // time step parameters 
  double t = 0.0, t_step=1, T=2000;
  // Select explicit method
  const gsl_odeiv2_step_type * st = gsl_odeiv2_step_msadams;
  //set errors and create the driver object
  double abserr = 1e-17;
  double relerr = 5e-17;

  gsl_odeiv2_driver* driver= 
    gsl_odeiv2_driver_alloc_y_new(&sys, st, t_step, abserr, relerr);

   double y[6] ={-6.685074817026049E-01, 1.706558853671706E+00, -1.123043465687632E+00, -1.207950275095047E-02, -3.384553498022686E-03, 3.350958555890135E-03};
     // comparison of initial time moment with accurate calculation
    // printf ("%.16le %.22le %.22le %.22le \n", t, y[0], y[1],  y[2]);

        FILE *kk, *pp;
        kk=fopen("A1.txt","w");
        pp=fopen("A2.txt","w");          
    while (t <= T) {
            gsl_odeiv2_driver_apply (driver, &t, t+t_step, y); 
                // Xh Yh Zh Xl Yl Zl Vxh Vyh Vzh Vxl Vyl Vzl  
              fprintf(kk,"%f  %.16le %.16le %.16le \n", t, y[0], y[1],  y[2]);
              fprintf(pp,"%f  %.16le %.16le %.16le \n", t, y[3],  y[4], y[5]);
           // printf ("%.16le \n",t);
     //printf ("%.16le %.16le %.16le %.16le %.16le %.16le %.16le\n", t, y[0], y[1],  y[2], y[3],  y[4], y[5]);
       }
  
    gsl_odeiv2_driver_free (driver);
                     fclose(kk);
                     fclose(pp);
  return 0;
} 
   
//gcc -Wall -I/usr/local/Cellar/gsl/2.6/include gsl_adams.c  -L/usr/local/Cellar/gsl/2.6/lib -lgsl -lgslcblas -lm -o gsl_adams




